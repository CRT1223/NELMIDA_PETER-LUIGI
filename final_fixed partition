import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class FixedPartitionSimulation extends JFrame {
    private static final int KERNEL = 50;
    private int ram, processes;
    private JTextField memoryRAMBox, noProcessesBox;
    private JPanel memoryRAMPanel, graphicalPanel;
    private JTextArea waitingProcesses;
    private JLabel label4;
    private List<Process> executedProcesses = new ArrayList<>();
    private JTable processTable;
    private List<Integer> partitions = new ArrayList<>();
    private List<Process> processList = new ArrayList<>();

    public FixedPartitionSimulation() {
        setTitle("Fixed Partition Simulator");
        setSize(1000, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(3, 2));
        inputPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        JLabel memoryLabel = new JLabel("Memory (RAM):");
        memoryRAMBox = new JTextField();
        inputPanel.add(memoryLabel);
        inputPanel.add(memoryRAMBox);

        JLabel processesLabel = new JLabel("No. of Processes:");
        noProcessesBox = new JTextField();
        inputPanel.add(processesLabel);
        inputPanel.add(noProcessesBox);

        JButton proceedButton = new JButton("Proceed to Table");
        proceedButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                proceedToTable();
            }
        });
        inputPanel.add(proceedButton);

        add(inputPanel, BorderLayout.NORTH);

        String[] columnNames = {"Process ID", "Memory Requirement (KB)", "Allocation Time", "Process Time"};
        Object[][] data = new Object[10][4];
        DefaultTableModel model = new DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column != 0; // Only Process ID is not editable
            }
        };

        processTable = new JTable(model);
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        for (int i = 0; i < processTable.getColumnCount(); i++) {
            processTable.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        // Set wider columns for Memory Requirement, Allocation Time, and Process Time
        int columnWidth = 150; // Adjust this width as needed
        processTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF); // Prevent automatic resizing
        processTable.getColumnModel().getColumn(1).setPreferredWidth(columnWidth); // Memory Requirement
        processTable.getColumnModel().getColumn(2).setPreferredWidth(columnWidth); // Allocation Time
        processTable.getColumnModel().getColumn(3).setPreferredWidth(columnWidth); // Process Time

        add(new JScrollPane(processTable), BorderLayout.CENTER);

        JPanel memoryPanel = new JPanel(new BorderLayout());
        memoryRAMPanel = new JPanel();
        memoryPanel.add(new JScrollPane(memoryRAMPanel), BorderLayout.CENTER);

        waitingProcesses = new JTextArea(10, 30);
        waitingProcesses.setEditable(false);
        memoryPanel.add(new JScrollPane(waitingProcesses), BorderLayout.EAST);

        label4 = new JLabel("0");
        memoryPanel.add(label4, BorderLayout.SOUTH);

        add(memoryPanel, BorderLayout.EAST);

        graphicalPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                drawMemoryPartitions(g);
            }
        };
        graphicalPanel.setPreferredSize(new Dimension(400, 600));
        add(graphicalPanel, BorderLayout.WEST);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        JButton resetButton = new JButton("Reset");
        resetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetComputer();
            }
        });
        buttonPanel.add(resetButton);

        JButton generateButton = new JButton("Generate");
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generateResults();
            }
        });
        buttonPanel.add(generateButton);

        add(buttonPanel, BorderLayout.SOUTH);
    }

    private void proceedToTable() {
        String memoryRAMText = memoryRAMBox.getText();
        String noProcessesText = noProcessesBox.getText();

        if (memoryRAMText.isEmpty() || noProcessesText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fields cannot be empty", "Fixed Partition Simulator", JOptionPane.WARNING_MESSAGE);
        } else {
            int memoryRAM = 0, noProcesses = 0;
            try {
                memoryRAM = Integer.parseInt(memoryRAMText);
                noProcesses = Integer.parseInt(noProcessesText);
                processes = noProcesses;
                if (memoryRAM > 5000) {
                    JOptionPane.showMessageDialog(this, "RAM Size Exceeded Maximum RAM Requirement!", "Fixed Partition Simulator", JOptionPane.ERROR_MESSAGE);
                } else if (memoryRAM <= 0 || memoryRAM < 1000) {
                    JOptionPane.showMessageDialog(this, "RAM Size does not meet the minimum requirement", "Fixed Partition Simulator", JOptionPane.ERROR_MESSAGE);
                } else if (noProcesses > 10) {
                    JOptionPane.showMessageDialog(this, "Exceeded Maximum Processes Requirement!", "Fixed Partition Simulator", JOptionPane.ERROR_MESSAGE);
                } else if (noProcesses <= 0 || noProcesses < 5) {
                    JOptionPane.showMessageDialog(this, "No. of Processes does not meet the minimum requirement", "Fixed Partition Simulator", JOptionPane.ERROR_MESSAGE);
                } else {
                    fillTable(noProcesses);
                    configureMemoryPartitions(memoryRAM - KERNEL, noProcesses); // Subtract KERNEL from memoryRAM
                    ram = memoryRAM; // Store the original RAM size including kernel
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Invalid Input", "Fixed Partition Simulator", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void fillTable(int processes) {
        DefaultTableModel model = (DefaultTableModel) processTable.getModel();
        model.setRowCount(0);
        for (int i = 0; i < processes; i++) {
            model.addRow(new Object[]{"P" + (i + 1), "", "", ""});
        }
    }

    private void configureMemoryPartitions(int memoryRAM, int noProcesses) {
        partitions.clear();
        processList.clear();
        int partitionSize = memoryRAM / noProcesses;
        for (int i = 0; i < noProcesses; i++) {
            partitions.add(partitionSize);
        }
        waitingProcesses.append("Partitions configured: " + partitions + "\n");
    }

    private void generateResults() {
        DefaultTableModel model = (DefaultTableModel) processTable.getModel();
        processList.clear();
        waitingProcesses.setText("");

        try {
            for (int i = 0; i < model.getRowCount(); i++) {
                String processId = (String) model.getValueAt(i, 0);
                int memoryRequirement = Integer.parseInt(model.getValueAt(i, 1).toString());
                int allocationTime = Integer.parseInt(model.getValueAt(i, 2).toString());
                int processTime = Integer.parseInt(model.getValueAt(i, 3).toString());

                processList.add(new Process(processId, memoryRequirement, allocationTime, processTime));
            }

            waitingProcesses.append("Generated Processes:\n");
            for (Process process : processList) {
                waitingProcesses.append(process.toString() + "\n");
            }

            performFixedPartitionAllocation();

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input in the table. Please enter valid integers.", "Fixed Partition Simulator", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void performFixedPartitionAllocation() {
        for (Process process : processList) {
            boolean allocated = false;
            for (int i = 0; i < partitions.size(); i++) {
                if (process.getMemoryRequirement() <= partitions.get(i)) {
                    waitingProcesses.append("Allocating " + process.getId() + " to partition " + (i + 1) + "\n");
                    partitions.set(i, partitions.get(i) - process.getMemoryRequirement());
                    allocated = true;
                    break;
                }
            }
            if (!allocated) {
                waitingProcesses.append("Process " + process.getId() + " could not be allocated due to insufficient memory.\n");
            }
        }

        waitingProcesses.append("\nFinal Partition States:\n");
        for (int i = 0; i < partitions.size(); i++) {
            waitingProcesses.append("Partition " + (i + 1) + ": " + partitions.get(i) + " KB remaining\n");
        }

        graphicalPanel.repaint();
    }

    private void drawMemoryPartitions(Graphics g) {
        int x = 10;
        int width = 200;
        int totalHeight = graphicalPanel.getHeight() - 20;
        int numPartitions = partitions.size();

        if (numPartitions > 0) {
            int partitionHeight = totalHeight / (numPartitions + 1); // Add 1 for kernel OS

            // Draw kernel OS
            g.setColor(Color.ORANGE);
            g.fillRect(x, 10, width, partitionHeight);
            g.setColor(Color.BLACK);
            g.drawRect(x, 10, width, partitionHeight);

            // Center the text in the kernel OS partition
            FontMetrics fm = g.getFontMetrics();
            String osText = "OS " + KERNEL + "KB";
            int osTextWidth = fm.stringWidth(osText);
            int osTextHeight = fm.getHeight();
            g.drawString(osText, x + (width - osTextWidth) / 2, 10 + (partitionHeight + osTextHeight) / 2 - fm.getDescent());

            for (int i = 0; i < partitions.size(); i++) {
                int partitionTotalHeight = partitionHeight; // Fixed height for each partition
                int remainingHeight = (int) ((partitions.get(i) / (double) (ram - KERNEL)) * totalHeight);
                g.setColor(Color.GREEN);
                g.fillRect(x, 10 + partitionHeight + (i * partitionHeight), width, remainingHeight);
                g.setColor(Color.RED);
                g.fillRect(x, 10 + partitionHeight + (i * partitionHeight) + remainingHeight, width, partitionTotalHeight - remainingHeight);
                g.setColor(Color.BLACK);
                g.drawRect(x, 10 + partitionHeight + (i * partitionHeight), width, partitionTotalHeight);

                // Center the text in each partition
                String partitionText = "Partition " + (i + 1) + ": " + partitions.get(i) + " KB remaining";
                int partitionTextWidth = fm.stringWidth(partitionText);
                int partitionTextHeight = fm.getHeight();
                g.drawString(partitionText, x + (width - partitionTextWidth) / 2, 10 + partitionHeight + (i * partitionHeight) + (partitionTotalHeight + partitionTextHeight) / 2 - fm.getDescent());
            }
        }
    }

    private void resetComputer() {
        executedProcesses.clear();
        memoryRAMPanel.removeAll();
        memoryRAMBox.setText("");
        noProcessesBox.setText("");
        waitingProcesses.setText("");
        label4.setText("0");
        DefaultTableModel model = (DefaultTableModel) processTable.getModel();
        model.setRowCount(0);
        partitions.clear();
        processList.clear();
        graphicalPanel.repaint();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FixedPartitionSimulation().setVisible(true);
            }
        });
    }
}

class Process {
    private String id;
    private int memoryRequirement;
    private int allocationTime;
    private int processTime;

    public Process(String id, int memoryRequirement, int allocationTime, int processTime) {
        this.id = id;
        this.memoryRequirement = memoryRequirement;
        this.allocationTime = allocationTime;
        this.processTime = processTime;
    }

    public String getId() {
        return id;
    }

    public int getMemoryRequirement() {
        return memoryRequirement;
    }

    public int getAllocationTime() {
        return allocationTime;
    }

    public int getProcessTime() {
        return processTime;
    }

    @Override
    public String toString() {
        return "Process{" +
                "id='" + id + '\'' +
                ", memoryRequirement=" + memoryRequirement +
                ", allocationTime=" + allocationTime +
                ", processTime=" + processTime +
                '}';
    }
}
